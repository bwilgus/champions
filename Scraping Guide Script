list(soup.children)
[type(item) for item in list(soup.children)]
html = list(soup.children)[2]
list(html.children)
body = list(html.children)[8]

def washUtah():
    bSoup('https://www.whatifsports.com/ncaafb/boxscore.asp?gameid=9916648&nomenu=1&ad=0')

def boiseTroy():
    bSoup('https://www.whatifsports.com/ncaafb/boxscore.asp?gameid=9891802&nomenu=1&ad=1')



##############################################

awayTeam = list(soup.children)[3].get_text()
homeTeam = list(soup.children)[4].get_text()

s = list(list(list(soup.children)[2])[3])[8]  
  Top Box Score, Scoring Summary, Table Header for "Team Statistics"
    list(s.children)[1] = top box score
      Home Scores: s = list(list(list(list(list(list(soup.children)[2])[3])[8])[1])[1])[3]
        Home Team = list(s.stripped_strings)[0]
        Q1 = list(s.stripped_strings)[1]
        2 = list(s.stripped_strings)[2]
        3 = list(s.stripped_strings)[3]
        4 = list(s.stripped_strings)[4]
        OT# = list(s.stripped_strings)[4 + n]
        Final = list(s.stripped_strings)[len(s.stripped_strings)]
        
        for i in range(len(list(s.stripped_strings))):
	        list(s.stripped_strings)[i]
      
      Away Scores: s = list(list(list(list(list(list(soup.children)[2])[3])[8])[1])[1])[5]
        Away Team = list(s.stripped_strings)[0]
        Q1 = list(s.stripped_strings)[1]
        2 = list(s.stripped_strings)[2]
        3 = list(s.stripped_strings)[3]
        4 = list(s.stripped_strings)[4]
        OT# = list(s.stripped_strings)[4 + n]
        Final = list(s.stripped_strings)[len(s.stripped_strings)]
        
        for i in range(len(list(s.stripped_strings))):
	        list(s.stripped_strings)[i]
      
    list(s.children)[3] = Gridiron Dynasty ad
    
    ## This will give a comma delimited list of the scoring plays
    s = list(list(list(list(list(soup.children)[2])[3])[8])[5])[1] = Score Summary
      list(list(s.children)[i].stripped_strings)
      list(s.children)[1] = Wrapper
      for i in range(len(list(s.children))):
        try: list(list(s.children)[i].stripped_strings)
        except:
          continue
        
    list(s.children)[7] = Just the table header for 'Team Statistics'

list(soup.children)[3].get_text()[5:] = away team: Team, Mascot
list(soup.children)[4].get_text()[5:] = home team: Team, Mascot
##Build an error check here to ensure that the link pulled from Excel equals the data from the website

list(list(soup.children)[6].stripped_strings)
  list(a.children)[0].get_text() = Category
  list(a.children)[1].get_text() = Away 
  list(a.children)[2].get_text() = Home 

list(list(soup.children)[6].stripped_strings) = Team Stats, First Downs, Rushing
  list(a.children)[0].get_text() = Category
  list(a.children)[1].get_text() = Away 
  list(a.children)[2].get_text() = Home 

list(list(soup.children)[10].stripped_strings) = Team Stats, First Downs, Passing
  list(a.children)[0].get_text() = Category
  list(a.children)[1].get_text() = Away 
  list(a.children)[2].get_text() = Home 

list(list(soup.children)[12].stripped_strings) = Team Stats, First Downs, Penalty
  list(a.children)[0].get_text() = Category
  list(a.children)[1].get_text() = Away 
  list(a.children)[2].get_text() = Home 

list(list(soup.children)[14].stripped_strings) = Team Stats, Third Down Efficiency
  list(a.children)[0].get_text() = Category
  list(a.children)[1].get_text() = Away 
  list(a.children)[2].get_text() = Home 

list(list(soup.children)[16].stripped_strings) = Team Stats, Fourth Down Efficiency
  list(a.children)[0].get_text() = Category
  list(a.children)[1].get_text() = Away 
  list(a.children)[2].get_text() = Home 

list(list(soup.children)[18].stripped_strings) = Team Stats, Rushes-Yards
  list(a.children)[0].get_text() = Category
  list(a.children)[1].get_text() = Away 
  list(a.children)[2].get_text() = Home 

list(list(soup.children)[20].stripped_strings) = Team Stats, Avg Rush
  list(a.children)[0].get_text() = Category
  list(a.children)[1].get_text() = Away 
  list(a.children)[2].get_text() = Home 

list(list(soup.children)[22].stripped_strings) = Team Stats, Comp-Att-Int
  list(a.children)[0].get_text() = Category
  list(a.children)[1].get_text() = Away 
  list(a.children)[2].get_text() = Home 

list(list(soup.children)[24].stripped_strings) = Team Stats, Passing Yards
  list(a.children)[0].get_text() = Category
  list(a.children)[1].get_text() = Away 
  list(a.children)[2].get_text() = Home 

list(list(soup.children)[26].stripped_strings) = Team Stats, Sacks-Yards
  list(a.children)[0].get_text() = Category
  list(a.children)[1].get_text() = Away 
  list(a.children)[2].get_text() = Home 

list(list(soup.children)[28].stripped_strings) = Team Stats, Fumbles-Lost
  list(a.children)[0].get_text() = Category
  list(a.children)[1].get_text() = Away 
  list(a.children)[2].get_text() = Home 

list(list(soup.children)[30].stripped_strings) = Team Stats, Punts-Avg
  list(a.children)[0].get_text() = Category
  list(a.children)[1].get_text() = Away 
  list(a.children)[2].get_text() = Home 

list(list(soup.children)[32].stripped_strings) = Team Stats, KR-Avg
  list(a.children)[0].get_text() = Category
  list(a.children)[1].get_text() = Away 
  list(a.children)[2].get_text() = Home 

list(list(soup.children)[34].stripped_strings) = Team Stats, PR-Avg
  list(a.children)[0].get_text() = Category
  list(a.children)[1].get_text() = Away 
  list(a.children)[2].get_text() = Home 

list(list(soup.children)[36].stripped_strings) = Team Stats, Penalties-Yard
  list(a.children)[0].get_text() = Category
  list(a.children)[1].get_text() = Away 
  list(a.children)[2].get_text() = Home 

list(list(soup.children)[38].stripped_strings) = Team Stats, Time of Possession
  list(a.children)[0].get_text() = Category
  list(a.children)[1].get_text() = Away 
  list(a.children)[2].get_text() = Home 


s = list(list(list(list(list(list(soup.children)[44])[1])[1])[3])[1])[3] = Home RB Stats

Formula:      for i in range(len(list(e.children)[X]) / 2 - 0.5):
                  dataFrame.append(list(e.children)[i * 2 - 1]))
               list(e.children)[1] = Year + Player

Formula:          Replaces the html character for a space in the player's name
                  name = ""
                  name = str(list(f.children)[1].get_text())
                  name.replace(r"\xa0", " ")

               list(e.children)[3] = Att
               list(e.children)[5] = Yds
               list(e.children)[7] = 20+
               list(e.children)[9] = L
               list(e.children)[11] = TD
Formula:         str(list(f.children)[0]) = Text Value

##   Runs through Players, picking up the stats and info for Away RBs
###   Change to +.5 if you need evens

import pandas as pd

rbTest = pd.DataFrame([], columns = rushTitle)

for i in range((int(len(list(s.children))/2-.5))):
	appTest.append(list(list(s.children)[int((i+.5)*2)].stripped_strings)[1])
	appTest.append(list(soup.children)[4].get_text()[5:])
	##This below is to append the week, get from Excel file
	appTest.append(INSERT CODE TO GET EXCEL VALUE)
	appTest.append(list(soup.children)[3].get_text()[5:])
	appTest.append(list(list(s.children)[int((i+.5)*2)].stripped_strings)[2])
	appTest.append(list(list(s.children)[int((i+.5)*2)].stripped_strings)[3])
	appTest.append(list(list(s.children)[int((i+.5)*2)].stripped_strings)[4])
	appTest.append(list(list(s.children)[int((i+.5)*2)].stripped_strings)[5])
	appTest.append(list(list(s.children)[int((i+.5)*2)].stripped_strings)[6])
##	print(appTest)
	rbTest.loc[len(rbTest)] = appTest
##	print(rbTest)
	appTest = []


list(list(list(list(list(list(soup.children)[44])[1])[1])[3])[1])[3] = Home Stats
       list(r.children)[3] = Home Wrapper

     list(n.children)[3] = Receiving Stats Table


     list(n.children)[5] = Passing Stats Table


     list(n.children)[7] = Defense Stats Table


     list(n.children)[9] = Field Goal Stats Table



list(soup.children)[48] = Player of the Game
  list(a.children)[1] = Wrapper
      list(b.children)[1] = Title
      list(b.children)[1] = Player
        list(c.children)[0] = Wrapper
          list(d.children)[0] = Wrapper
Formula:    name = str(e)
            name = name[:(name.find("(") - 1)]



This gets you the plain text version of the lowest element
x.get_text()
