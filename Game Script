from requests import get
from requests.exceptions import RequestException
from contextlib import closing
from bs4 import BeautifulSoup

import openpyxl
from openpyxl import Workbook
from openpyxl import load_workbook

import os


import selenium
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as ec

###############################################################################################

        ##Workbook Setup

wkbkURL = r'C:\users\wilgj\desktop\script test.xlsx'
wb = load_workbook(wkbkURL)
ws = wb.active




#These variables denote which columns are which number.
## A = 1, B = 2, C = 3, etc.

##gID = 1

##atID = 2
##aConf = 3
##aRk = 4
##aName = 10
##aConc = 6
##aYr = 11



##hID = 8
##hConf = 9
##hRk = 10
##hName = 6
##hConc = 12
##hYr = 7

##gLoc = 13
week = 16
winTeam = 17
lossTeam = 18
awayScore = 20
homeScore = 21
awayWins = 22
homeWins = 23
boxScoreURL = 24


###############################################################################################

    #BeautifulSoup Functions


def simple_get(url):
    """
    Attempts to get the content at `url` by making an HTTP GET request.
    If the content-type of response is some kind of HTML/XML, return the
    text content, otherwise return None.
    """
    try:
        with closing(get(url, stream=True)) as resp:
            if is_good_response(resp):
                return resp.content
            else:
                return None

    except RequestException as e:
        log_error('Error during requests to {0} : {1}'.format(url, str(e)))
        return None

def is_good_response(resp):
    """
    Returns True if the response seems to be HTML, False otherwise.
    """
    content_type = resp.headers['Content-Type'].lower()
    return (resp.status_code == 200 
            and content_type is not None 
            and content_type.find('html') > -1)


def log_error(e):
    print(e)



###############################################################################################

    #My Functions

def gameLog(q):
    gameID = str(gameURL[(gameURL.find('gameid=')+7):gameURL.find('&nomenu')])
    pbpURL = 'https://www.whatifsports.com/ncaafb/pbp.asp?gameid=' + gameID + '&qtr=' + str(q)
    return pbpURL

def gameID(q):
    gameID = str(q[(q.find('gameid=')+7):q.find('&nomenu')])
    return gameID

def bSoup(U):
    global gameURL
    global q1, q2, q3, q4
    global raw_html, soup
    gameURL = U
    q1 = gameLog(1)
    q2 = gameLog(2)
    q3 = gameLog(3)
    q4 = gameLog(4)
    raw_html = simple_get(U)
    soup = BeautifulSoup(raw_html, 'html.parser')
    

def getGameURL():
    
    elems = browser.find_elements_by_xpath("//a[@href]")
    for elem in elems:
        if str(elem.get_attribute("href")).find('GameID=') > 0:
            return elem.get_attribute("href")
###############################################################################################


#Establishes browser
browser = webdriver.Chrome()



"""
autoScript(sNum, fNum)
This is the actual script that simulates the games.
sNum is the first row accessed, default is 2 (accounting for a header)
fNum is the last row accessed.

This could take a long time depending on how many games you intend to run.
"""
def autoScript(sNum = 2, fNum = len(ws['A'])):
    global browser
    global homeYear
    global awayYear
    global getGameURL
    global counter

    counter = 0
    
    for i in range(sNum,fNum):
        browser.get('https://www.whatifsports.com/ncaafb');
        element = WebDriverWait(browser, 10).until(ec.presence_of_element_located((By.ID, "homebtn")))

        #Grabs pertinent data out of the workbook        
        wk = ws.cell(i, week).value
        homeTeam = ws.cell(i, hName).value
        awayTeam = ws.cell(i, aName).value
        hYear = ws.cell(i, hYr).value
        aYear = ws.cell(i, aYr).value
        Loc = ws.cell(i, gLoc).value

        #Locates team names and years by CSS name
        away = browser.find_element_by_name('vname')
        home = browser.find_element_by_name('hname')
        ayear = browser.find_element_by_name('vseason')
        hyear = browser.find_element_by_name('hseason')




        hWins = 0
        aWins = 0
        winner = ""


        #Sets up Team and Year
        away.send_keys(awayTeam)
        ayear.send_keys(aYear)
        home.send_keys(homeTeam)
        hyear.send_keys(hYear)

        #For some reason, Wyoming glitches out if its button is hit second.
        #This assures it is clicked first.
        if awayTeam == 'Wyoming':
            abutton = browser.find_element_by_id('visitorbtn')
            abutton.send_keys(Keys.RETURN)
            hbutton = browser.find_element_by_id('homebtn')
            hbutton.send_keys(Keys.RETURN)
        else:            
            hbutton = browser.find_element_by_id('homebtn')
            hbutton.send_keys(Keys.RETURN)
            abutton = browser.find_element_by_id('visitorbtn')
            abutton.send_keys(Keys.RETURN)


        
        #Clicks the radio button denoting game location
        if Loc == "H":
            inLoc = browser.find_element_by_xpath("//input[@value=0]").click()
        elif Loc == "N":
            inLoc = browser.find_element_by_xpath("//input[@value=-1]").click()
        else:
            print('Loc error on ' + away + ' v. ' + home)


        #Runs seven game series
        while hWins < 4 and aWins < 4:
            aScore = 0
            hScore = 0

            #Hits 'Play'
            playbutton = browser.find_element_by_xpath("//*[@id='playBtn']")
            playbutton.send_keys(Keys.RETURN)
            

            #Gets Game Score
            boxURL = getGameURL()
            bSoup(boxURL)
            s = list(list(list(list(list(list(soup.children)[2])[3])[8])[1])[1])[5]
            hScore = int(list(s.stripped_strings)[len(list(s.stripped_strings))-1])
            s = list(list(list(list(list(list(soup.children)[2])[3])[8])[1])[1])[3]
            aScore = int(list(s.stripped_strings)[len(list(s.stripped_strings))-1])

            #Checks Best of Seven standing
            if int(hScore) > int(aScore):
                hWins += 1
            else:
                aWins += 1
            
            if hWins == 4:
                winner = homeTeam
                loser = awayTeam
                
            if aWins == 4:
                winner = awayTeam
                loser = homeTeam

            #Closes pop in window, prints series standings
            xbutton = browser.find_element_by_xpath("//*[@id='fancybox-close']")
            xbutton.click()
            print(awayTeam + ': ' + str(aScore) + ' ' + homeTeam + ': ' + str(hScore))
            print('Series: ' + str(aWins) + ' to ' + str(hWins))
            
        print(winner + ' wins')

        #Notes winner, loser, Bo7 score, and box score url
        ws.cell(row=i,column=winTeam).value = winner
        ws.cell(row=i,column=lossTeam).value = loser
        ws.cell(row=i,column=awayScore).value = int(aScore)
        ws.cell(row=i,column=homeScore).value = int(hScore)
        ws.cell(row=i,column=awayWins).value = int(aWins)
        ws.cell(row=i,column=homeWins).value = int(hWins)
        ws.cell(row=i,column=boxScoreURL).value = boxURL

        #Resets home and away team
        acbutton = browser.find_element_by_id('visitorclearbtn')
        acbutton.send_keys(Keys.RETURN)
        hcbutton = browser.find_element_by_id('homeclearbtn')
        hcbutton.send_keys(Keys.RETURN)

        #Updates on status complete
        print(str(round(float(i/(len(ws['A']))-sNum)*100,2)) + ' percent done.')

        #Autosaves every 20 games
        if counter % 20 == 0:
            wb.save('dataOutput_' + str(counter / 20) + '.xlsx')

        counter += 1
        
    wb.save('dataOutput.xlsx')
