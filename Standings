import pandas as pd
import numpy as np
from teamCon import teamCon
from divisions import teamDiv
import random
import pprint
from idDic import idDic
from APR import aprDic

pd.options.mode.chained_assignment = None

def tmWin(tm, wk):
    return(len(wsData[(wsData.Win == tm) & (wsData.Week <= float(wk))]))
            
def tmLoss(tm, wk):
    return(len(wsData[(wsData.Loss == tm) & (wsData.Week <= float(wk))]))

def conWin(tm, i, wk):
    return(len(wsData[(wsData.Win == tm) & (wsData['Conference Game?'] == True) & (wsData.Week <= float(wk))]))
            
def conLoss(tm, i, wk):
    return(len(wsData[(wsData.Loss == tm) & (wsData['Conference Game?'] == True) & (wsData.Week <= float(wk))]))

def teamAPR(tm):
    return(aprDic[tm])

def teamID(tm):
    return(str(idDic[tm]).zfill(3))

def conf(tm):
    return(teamCon[tm])

def div(tm):
    try:
        div = teamDiv[tm]
    except:
        div = '---'
    return(div)

def winPercent(w,l):
    return round(w/(w+l) * 100,2)

def schedule(tm):
    global sched
    
    sched = wsData[(wsData.Home == tm) | (wsData.Away == tm)]
    sched.sort_values('Week')
    sched.reset_index()

    sched = sched.drop(columns=['Home ID', 'Home Conf', 'Away ID', 'Away Conf', "Home Conc", "Away Conc", "Date","Pre-Game Hype Score", "Upset Score", "Margin", "Write About", '2017?'])
    
    return(print(sched.to_string()))

def divChamp(div):
    return(div.Team[0])

def tieOvr(tl):
    ovrDF = teams[teams['Teams'].isin(tl)]

def ties(df):
    global indexer
    global reindexer
    global tieOrder
##Head to Head
    tieWins = []
    indexer = []
    reindexer = []

    df.sort_values('Conf W%',ascending=False,inplace=True)
    df.reset_index(drop=True,inplace=True)
    
    for i in range(len(df)):
        print(df.Teams[i])
        if len(df[df['Conf W%'] == df['Conf W%'][i]]) == 1:
            indexer.append(df.Teams[i])
        elif len(df[df['Conf W%'] == df['Conf W%'][i]]) > 1:
            if df['Conf W%'][i] not in tieWins:
                tieWins.append(df['Conf W%'][i])
                tieTeams = df[df['Conf W%'] == df['Conf W%'][i]]
                tieTeams.reset_index(inplace=True)
                tieOrder = hth(tieTeams)
                for x in range(len(tieOrder)):
                    indexer.append(tieOrder.Teams[x])
    for i in range(len(indexer)):
        reindexer.append(df.index[df['Teams'] == indexer[i]][0])

    df = df.reindex(reindexer)

##    print('indexer')
##    print(indexer)
##    print('reindexer')
##    print(reindexer)
    print(df.to_string())

                
        
    

##secWest.index[secWest['Team'] == 'LSU Tigers'][0]

tt = ['Mississippi Rebels','Mississippi State Bulldogs','Texas A&M Aggies']
tf = pd.DataFrame(data=tt,columns=['Teams'])
def hth(df):
    
    if len(df) == 2:
        try:
            t1ID = idDic[df.Teams[0]]
        except:
            print(df)
        t2ID = idDic[df.Teams[1]]

        if int(t1ID) < int(t2ID):
            gID = t1ID + t2ID
        elif int(t2ID) < int(t1ID):
            gID = t2ID + t1ID
            
        hthG = wsData[wsData['Game ID'] == gID]

        try:
            hthW = list(hthG.Win)[0]
        except:
            hthW = ''
        try:
            hthL = list(hthG.Loss)[0]
        except:
            hthL = ''
            
        df = pd.DataFrame(data=[hthW,hthL],columns=['Teams'])
    elif len(df) > 2:
        df['Wins'] = np.nan
        df['Losses'] = np.nan
        for i in range(len(df)):
            wins = 0
            losses = 0
            for x in range(len(df)):
                if i != x:
                    teams = [df.Teams[i], df.Teams[x]]
                    teams = pd.DataFrame(data=teams,columns=['Teams'])
                    game = hth(teams)
                    if game.Teams[0] == df.Teams[i]:
                        wins += 1
                    elif game.Teams[1] == df.Teams[i]:
                        losses += 1

            df.Wins[i] = wins
            df.Losses[i] = losses
            df['W%'][i] = round(wins/(wins+losses)*100.00,2)

        df.sort_values('W%',inplace=True, ascending=False)

    return(df)

##def secTie(df):
##    newDF = df
##    topWins = max(newDF['Conf W%'])
##    tieNo = len(newDF[newDF['Conf W%'] == topWins])
##    
##    if tieNo == 1:
##        return newDF
####Two teams tied
##    elif tieNo == 2:
##        t1 = 
        
    

##Three or more teams tied:
    ##H2H


    ##Overall Record


    ##H2H w/ next best team in division/conference


    
    

def coinToss(teamList):
    ints = len(teamList)
    toss = random.randint(0, ints - 1)
    return teamList[toss]




wsData = pd.read_excel(r'C:\users\wilgj\desktop\python crap\dataOutput.xlsx', sheet_name='data')
wsData['Game ID'] = wsData['Game ID'].apply('{:0>6}'.format)
WL = pd.read_excel(r'C:\users\wilgj\desktop\python crap\dataOutput.xlsx', sheet_name='WL')

teams = wsData.Home.drop_duplicates().sort_values()
teams = teams.reset_index(drop=True)
teams = teams.to_frame(name='Teams')

teams['ID'] = teams['Teams'].map(lambda x: teamID(x))
teams['Conference'] = teams['Teams'].map(lambda x: conf(x))
teams['Div'] = teams['Teams'].map(lambda x: div(x))

wkMin = min(wsData.Week)
wkMax = max(wsData.Week)

##userWk = input("Through which week? Min = " + str(wkMin) + ", Max = " + str(wkMax + 1) + ". For pre-season, enter -1. ")
userWk = 16
##print(userWk)

ACC = teams[teams.Conference == 'ACC']
ACC = ACC.reset_index(drop=True)

B10 = teams[teams.Conference == 'Big Ten']
B10 = B10.reset_index(drop=True)

B12 = teams[teams.Conference == 'Big 12']
B12 = B12.reset_index(drop=True)

P12 = teams[teams.Conference == 'Pac-12']
P12 = P12.reset_index(drop=True)

SEC = teams[teams.Conference == 'SEC']
SEC = SEC.reset_index(drop=True)

AAC = teams[teams.Conference == 'American']
AAC = AAC.reset_index(drop=True)

CUSA = teams[teams.Conference == 'C-USA']
CUSA = CUSA.reset_index(drop=True)

MAC = teams[teams.Conference == 'MAC']
MAC = MAC.reset_index(drop=True)

MWC = teams[teams.Conference == 'Mountain West']
MWC = MWC.reset_index(drop=True)

SBC = teams[teams.Conference == 'Sun Belt']
SBC = SBC.reset_index(drop=True)

IND = teams[teams.Conference == 'Independent']
IND = IND.reset_index(drop=True)

cons = [AAC, ACC, B10, B12, CUSA, IND, MAC, MWC, P12, SBC, SEC]

for i in range(len(cons)):
    cons[i]['Wins'] = cons[i]['Teams'].map(lambda x: tmWin(x, userWk))
    cons[i]['Losses'] = cons[i]['Teams'].map(lambda x: tmLoss(x, userWk))
    cons[i]['W%'] = np.vectorize(winPercent)(cons[i]['Wins'], cons[i]['Losses'])


for i in range(len(cons)):
    cons[i]['Conf Wins'] = cons[i]['Teams'].map(lambda x: conWin(x, i, userWk))
    cons[i]['Conf Losses'] = cons[i]['Teams'].map(lambda x: conLoss(x, i, userWk))
    try: cons[i]['Conf W%'] = np.vectorize(winPercent)(cons[i]['Conf Wins'], cons[i]['Conf Losses'])
    except: pass

teams['Wins'] = teams['Teams'].map(lambda x: tmWin(x, userWk))
teams['Losses'] = teams['Teams'].map(lambda x: tmLoss(x, userWk))


ACC = ACC.sort_values(by=['Div','Conf Wins'],ascending=[True,False])
ACC.reset_index(drop=True, inplace=True)

B10 = B10.sort_values(by=['Div','Conf Wins'],ascending=[True,False])
B10.reset_index(drop=True, inplace=True)

B12 = B12.sort_values(by=['Div','Conf Wins'],ascending=[True,False])
B12.reset_index(drop=True, inplace=True)

P12 = P12.sort_values(by=['Div','Conf Wins'],ascending=[True,False])
P12.reset_index(drop=True, inplace=True)

SEC = SEC.sort_values(by=['Div','Conf Wins'],ascending=[True,False])
SEC.reset_index(drop=True, inplace=True)

AAC = AAC.sort_values(by=['Div','Conf Wins'],ascending=[True,False])
AAC.reset_index(drop=True, inplace=True)

CUSA = CUSA.sort_values(by=['Div','Conf Wins'],ascending=[True,False])
CUSA.reset_index(drop=True, inplace=True)

MAC = MAC.sort_values(by=['Div','Conf Wins'],ascending=[True,False])
MAC.reset_index(drop=True, inplace=True)

MWC = MWC.sort_values(by=['Div','Conf Wins'],ascending=[True,False])
MWC.reset_index(drop=True, inplace=True)

SBC = SBC.sort_values(by=['Div','Conf Wins'],ascending=[True,False])
SBC.reset_index(drop=True, inplace=True)

IND = IND.sort_values(by='Wins',ascending=False)
IND.drop(columns=['Conf Wins','Conf Losses'],inplace=True)
IND.reset_index(drop=True, inplace=True)

####Create Division Tables

aacEast = AAC[AAC.Div == 'East']
aacEast = aacEast.reset_index(drop=True)
aacWest = AAC[AAC.Div == 'West']
aacWest = aacWest.reset_index(drop=True)

accAtl = ACC[ACC.Div == 'Atlantic']
accAtl = accAtl.reset_index(drop=True)
accCoast = ACC[ACC.Div == 'Coastal']
accCoast = accCoast.reset_index(drop=True)

b10East = B10[B10.Div == 'East']
b10East = b10East.reset_index(drop=True)
b10West = B10[B10.Div == 'West']
b10West = b10West.reset_index(drop=True)

p12North = P12[P12.Div == 'North']
p12North = p12North.reset_index(drop=True)
p12South = P12[P12.Div == 'South']
p12South = p12South.reset_index(drop=True)

secEast = SEC[SEC.Div == 'East']
secEast = secEast.reset_index(drop=True)
secWest = SEC[SEC.Div == 'West']
secWest = secWest.reset_index(drop=True)

cusaEast = CUSA[CUSA.Div == 'East']
cusaEast = cusaEast.reset_index(drop=True)
cusaWest = CUSA[CUSA.Div == 'West']
cusaWest = cusaWest.reset_index(drop=True)

macEast = MAC[MAC.Div == 'East']
macEast = macEast.reset_index(drop=True)
macWest = MAC[MAC.Div == 'West']
macWest = macWest.reset_index(drop=True)

mwcMtn = MWC[MWC.Div == 'Mountain']
mwcMtn = mwcMtn.reset_index(drop=True)
mwcWest = MWC[MWC.Div == 'West']
mwcWest = mwcWest.reset_index(drop=True)

sbEast = SBC[SBC.Div == 'East']
sbEast = sbEast.reset_index(drop=True)
sbWest = SBC[SBC.Div == 'West']
sbWest = sbWest.reset_index(drop=True)



#This needs to be after any standings modifications. It saves the conferences as a snapshot.
cons = [AAC, ACC, B10, B12, CUSA, IND, MAC, MWC, P12, SBC, SEC]
divs = [aacEast, aacWest, accAtl, accCoast, b10East, b10West, B12, IND, p12North, p12South, secEast, secWest, cusaEast, cusaWest, macEast, macWest, mwcMtn, mwcWest, sbEast, sbWest]


bowlTeams = teams[teams.Wins >= 6]
bowlTeams.reset_index(drop=True, inplace=True)
bowlTeams57 = teams[teams.Wins == 5]
bowlTeams57.reset_index(drop=True, inplace=True)
bowlTeams57['APR'] = bowlTeams57['Teams'].map(lambda x: teamAPR(x))
bowlTeams57.sort_values(by='APR', ascending=False,inplace=True)
bowlTeams57.reset_index(drop=True, inplace=True)

##for i in range(len(divs)):
##    print(divs[i].to_string())
##    print('.')
##    print('.')
##    print('.')

