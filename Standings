
import pandas as pd
import numpy as np
from teamCon import teamCon
from divisions import teamDiv
import random
import pprint
from idDic import idDic
from APR import aprDic
from definitions import coinToss, conf, conWin, conLoss, div, divChamp, schedule, teamAPR, teamID, tieOvr, tmWin, tmLoss, winPercent
import inspect
import sys

##Links
standingPath = r'C:\users\wilgj\desktop\python crap\standings\\'
dataWB = r'C:\users\wilgj\desktop\python crap\dataOutput.xlsx'

##Test dataframe
tt = ['Kentucky Wildcats','Texas A&M Aggies','South Carolina Gamecocks','Vanderbilt Commodores','Mississippi State Bulldogs','Mississippi Rebels']
tf = pd.DataFrame(data=tt,columns=['Teams'])
##

def retrieve_name(var):
    callers_local_vars = inspect.currentframe().f_back.f_locals.items()
    return [var_name for var_name, var_val in callers_local_vars if var_val is var]

##Turns off chain dataframe warning
pd.options.mode.chained_assignment = None


def secTies(df):
    global tieOrder
    global tieVals
    global tiedOut
    global tied
    global tieAdd

    tieOrder = pd.DataFrame()
    tied = pd.DataFrame()
    tieVals = []
    indexer = []
    reindexer = []
    tieAdd = []
    ties = 1
    matchup = []
    

    df.sort_values('Conf W%',ascending=False,inplace=True)
    df.reset_index(drop=True,inplace=True)

    tieVals = df['Conf W%'].drop_duplicates().reset_index(drop=True)

    for i in range(len(tieVals)):
        tV = df[df['Conf W%'] == tieVals[i]]
        tV.reset_index(drop=True,inplace=True)
        tieAdd.append(tV)
    
    for i in range(len(tieAdd)):
        print(i)
        if len(tieAdd[i]) > 1:
            tiedOut, ties = rr(tieAdd[i])
            print(tiedOut.to_string())
            for x in range(len(tiedOut)):
                df['Conf W%'][df.index[df['Teams'] == tiedOut['Teams'][x]][0]] += (round((len(tiedOut)-x)/10,2))
        elif len(tieAdd[i]) == 1:
            indexer.append(tieAdd[i]['Teams'][0])

    print(df.to_string())
    print('sys.exit()')
    sys.exit()

##    for i in range(len(tieVals)):
##        if len(df[df['Conf W%'] == tieVals[i]]) == 1:
##            tieAdd = df[df['Conf W%'] == tieVals[i]]
##            tieAdd.reset_index(drop=True,inplace=True)
##            indexer.append(tieAdd['Teams'][0])
##        elif len(df[df['Conf W%'] == tieVals[i]]) > 1:
####            tiedOut = tieBreaks(df, tieVals[i])
##            tiedOut, ties = rr(df[df['Conf W%'] == tieVals[i]])
##            print()
##            print('ties: ' + str(ties))
##            print('tiedOut:')
##            print(tiedOut.to_string())
##            print()
##            print()

    for x in range(len(tiedOut)):
        indexer.append(tiedOut['Teams'][x])

    for i in range(len(indexer)):
        reindexer.append(df.index[df['Teams'] == indexer[i]][0])

    df = df.reindex(reindexer)
##    print(indexer)
##    print(reindexer)
    
    return(df)
##    print(df.to_string())



def tieBreaks(df, tieVals):
    global ties
    global tiedOut
    global tieList
    global to2
    global indexer
    global tied
    to2 = []

    indexer=[]
    
    tieList = []
    
    ties = 1
    while ties == 1:
        tied = df[df['Conf W%'] == tieVals]
        tied.reset_index(drop=True, inplace=True)
        tiedOut, ties = rr(tied)
        print('tieBreaks rr escaped')
        print(ties)
        if ties == 1:
            for i in range(len(tiedOut)):
                print("i: " + str(i))
                if len(tiedOut[tiedOut['W%'] == tiedOut['W%'][i]]) > 1:
                    to2 = tieBreaks(tiedOut[tiedOut['W%'] == tiedOut['W%'][i]], tiedOut['W%'][i])
                    print('to2:')
                    print(to2)
                elif len(tiedOut[tiedOut['W%'] == tiedOut['W%'][i]]) == 1:
                    indexer.append(tiedOut['Teams'][i])
        else:
            for i in range(len(tiedOut)):
                indexer.append(tiedOut['Teams'][i])

        
    print('while loop escaped')
    print(tiedOut)
    print('tieBreaks')
    print(indexer)
    return(tiedOut)



def rr(df):
    if isinstance(df, list):
        df = pd.DataFrame(df, columns=['Teams'])    
    
    df['Wins'] = np.nan
    df['Losses'] = np.nan
    df['W%'] = np.nan

    df.reset_index(drop=True,inplace=True)

    ties = 0
    
    for i in range(len(df)):
        wins = 0
        losses = 0
        for x in range(len(df)):
            if i != x:
                teams = [df.Teams[i], df.Teams[x]]
                teams = pd.DataFrame(data=teams,columns=['Teams'])
                game = hth(teams)
                if game.Teams[0] == df.Teams[i]:
                    wins += 1
                elif game.Teams[1] == df.Teams[i]:
                    losses += 1

        df.Wins[i] = wins
        df.Losses[i] = losses
        if wins + losses > 0:
            df['W%'][i] = round(wins/(wins+losses)*100.00,2)
        else:
            df['W%'][i] = 0
    df.sort_values('W%',inplace=True, ascending=False)

    for i in range(len(df)):
        if len(df[df['W%'] == df['W%'][i]]) > 1:
            ties = 1
            
    df.reset_index(drop=True,inplace=True)
    
    return(df, ties)



def hth(df):
    try:
        t1ID = idDic[df.Teams[0]]
    except:
        print(df)
    t2ID = idDic[df.Teams[1]]

    if int(t1ID) < int(t2ID):
        gID = t1ID + t2ID
    elif int(t2ID) < int(t1ID):
        gID = t2ID + t1ID
        
    hthG = wsData[wsData['Game ID'] == gID]

    try:
        hthW = list(hthG.Win)[0]
    except:
        hthW = ''
    try:
        hthL = list(hthG.Loss)[0]
    except:
        hthL = ''
        
    df = pd.DataFrame(data=[hthW,hthL],columns=['Teams'])
    return(df)






wsData = pd.read_excel(dataWB, sheet_name='data')
wsData['Game ID'] = wsData['Game ID'].apply('{:0>6}'.format)
WL = pd.read_excel(dataWB, sheet_name='WL')

teams = wsData.Home.drop_duplicates().sort_values()
teams = teams.reset_index(drop=True)
teams = teams.to_frame(name='Teams')

teams['ID'] = teams['Teams'].map(lambda x: teamID(x))
teams['Conference'] = teams['Teams'].map(lambda x: conf(x))
teams['Div'] = teams['Teams'].map(lambda x: div(x))

wkMin = min(wsData.Week)
wkMax = max(wsData.Week)

##userWk = input("Through which week? Min = " + str(wkMin) + ", Max = " + str(wkMax + 1) + ". For pre-season, enter -1. ")
userWk = 16
##print(userWk)

ACC = teams[teams.Conference == 'ACC']
ACC = ACC.reset_index(drop=True)

B10 = teams[teams.Conference == 'Big Ten']
B10 = B10.reset_index(drop=True)

B12 = teams[teams.Conference == 'Big 12']
B12 = B12.reset_index(drop=True)

P12 = teams[teams.Conference == 'Pac-12']
P12 = P12.reset_index(drop=True)

SEC = teams[teams.Conference == 'SEC']
SEC = SEC.reset_index(drop=True)

AAC = teams[teams.Conference == 'American']
AAC = AAC.reset_index(drop=True)

CUSA = teams[teams.Conference == 'C-USA']
CUSA = CUSA.reset_index(drop=True)

MAC = teams[teams.Conference == 'MAC']
MAC = MAC.reset_index(drop=True)

MWC = teams[teams.Conference == 'Mountain West']
MWC = MWC.reset_index(drop=True)

SBC = teams[teams.Conference == 'Sun Belt']
SBC = SBC.reset_index(drop=True)

IND = teams[teams.Conference == 'Independent']
IND = IND.reset_index(drop=True)

cons = [AAC, ACC, B10, B12, CUSA, IND, MAC, MWC, P12, SBC, SEC]

for i in range(len(cons)):
    cons[i]['Wins'] = cons[i]['Teams'].map(lambda x: tmWin(x, userWk))
    cons[i]['Losses'] = cons[i]['Teams'].map(lambda x: tmLoss(x, userWk))
    cons[i]['W%'] = np.vectorize(winPercent)(cons[i]['Wins'], cons[i]['Losses'])


for i in range(len(cons)):
    cons[i]['Conf Wins'] = cons[i]['Teams'].map(lambda x: conWin(x, i, userWk))
    cons[i]['Conf Losses'] = cons[i]['Teams'].map(lambda x: conLoss(x, i, userWk))
    try: cons[i]['Conf W%'] = np.vectorize(winPercent)(cons[i]['Conf Wins'], cons[i]['Conf Losses'])
    except: pass

teams['Wins'] = teams['Teams'].map(lambda x: tmWin(x, userWk))
teams['Losses'] = teams['Teams'].map(lambda x: tmLoss(x, userWk))


ACC = ACC.sort_values(by=['Div','Conf Wins'],ascending=[True,False])
ACC.reset_index(drop=True, inplace=True)

B10 = B10.sort_values(by=['Div','Conf Wins'],ascending=[True,False])
B10.reset_index(drop=True, inplace=True)

B12 = B12.sort_values(by=['Div','Conf Wins'],ascending=[True,False])
B12.reset_index(drop=True, inplace=True)

P12 = P12.sort_values(by=['Div','Conf Wins'],ascending=[True,False])
P12.reset_index(drop=True, inplace=True)

SEC = SEC.sort_values(by=['Div','Conf Wins'],ascending=[True,False])
SEC.reset_index(drop=True, inplace=True)

AAC = AAC.sort_values(by=['Div','Conf Wins'],ascending=[True,False])
AAC.reset_index(drop=True, inplace=True)

CUSA = CUSA.sort_values(by=['Div','Conf Wins'],ascending=[True,False])
CUSA.reset_index(drop=True, inplace=True)

MAC = MAC.sort_values(by=['Div','Conf Wins'],ascending=[True,False])
MAC.reset_index(drop=True, inplace=True)

MWC = MWC.sort_values(by=['Div','Conf Wins'],ascending=[True,False])
MWC.reset_index(drop=True, inplace=True)

SBC = SBC.sort_values(by=['Div','Conf Wins'],ascending=[True,False])
SBC.reset_index(drop=True, inplace=True)

IND = IND.sort_values(by='Wins',ascending=False)
IND.drop(columns=['Conf Wins','Conf Losses'],inplace=True)
IND.reset_index(drop=True, inplace=True)

####Create Division Tables

aacEast = AAC[AAC.Div == 'East']
aacEast = aacEast.reset_index(drop=True)
aacWest = AAC[AAC.Div == 'West']
aacWest = aacWest.reset_index(drop=True)

accAtl = ACC[ACC.Div == 'Atlantic']
accAtl = accAtl.reset_index(drop=True)
accCoast = ACC[ACC.Div == 'Coastal']
accCoast = accCoast.reset_index(drop=True)

b10East = B10[B10.Div == 'East']
b10East = b10East.reset_index(drop=True)
b10West = B10[B10.Div == 'West']
b10West = b10West.reset_index(drop=True)

p12North = P12[P12.Div == 'North']
p12North = p12North.reset_index(drop=True)
p12South = P12[P12.Div == 'South']
p12South = p12South.reset_index(drop=True)

secEast = SEC[SEC.Div == 'East']
secEast = secEast.reset_index(drop=True)
secWest = SEC[SEC.Div == 'West']
secWest = secWest.reset_index(drop=True)

cusaEast = CUSA[CUSA.Div == 'East']
cusaEast = cusaEast.reset_index(drop=True)
cusaWest = CUSA[CUSA.Div == 'West']
cusaWest = cusaWest.reset_index(drop=True)

macEast = MAC[MAC.Div == 'East']
macEast = macEast.reset_index(drop=True)
macWest = MAC[MAC.Div == 'West']
macWest = macWest.reset_index(drop=True)

mwcMtn = MWC[MWC.Div == 'Mountain']
mwcMtn = mwcMtn.reset_index(drop=True)
mwcWest = MWC[MWC.Div == 'West']
mwcWest = mwcWest.reset_index(drop=True)

sbEast = SBC[SBC.Div == 'East']
sbEast = sbEast.reset_index(drop=True)
sbWest = SBC[SBC.Div == 'West']
sbWest = sbWest.reset_index(drop=True)



#This needs to be after any standings modifications. It saves the conferences as a snapshot.
cons = [AAC, ACC, B10, B12, CUSA, IND, MAC, MWC, P12, SBC, SEC]
divs = [aacEast, aacWest, accAtl, accCoast, b10East, b10West, B12, IND, p12North, p12South, secEast, secWest, cusaEast, cusaWest, macEast, macWest, mwcMtn, mwcWest, sbEast, sbWest]


bowlTeams = teams[teams.Wins >= 6]
bowlTeams.reset_index(drop=True, inplace=True)
bowlTeams57 = teams[teams.Wins == 5]
bowlTeams57.reset_index(drop=True, inplace=True)
bowlTeams57['APR'] = bowlTeams57['Teams'].map(lambda x: teamAPR(x))
bowlTeams57.sort_values(by='APR', ascending=False,inplace=True)
bowlTeams57.reset_index(drop=True, inplace=True)

#Sends HTML versions of the standings into txt files
for i in range(len(divs)):
    dName = retrieve_name(divs[i])
    dName = dName[0]
    docName = dName + '.txt'
    sTxt = open(standingPath + docName, 'w')
    sTxt.write(divs[i].to_html(index=False))
    sTxt.close()
    
##def ties(df):
##    global indexer
##    global reindexer
##    global tieOrder
####Head to Head
##    tieWins = []
##    indexer = []
##    reindexer = []
##
##    df.sort_values('Conf W%',ascending=False,inplace=True)
##    df.reset_index(drop=True,inplace=True)
##    
##    for i in range(len(df)):
##        if len(df[df['Conf W%'] == df['Conf W%'][i]]) == 1:
##            indexer.append(df.Teams[i])
##        elif len(df[df['Conf W%'] == df['Conf W%'][i]]) > 1:
##            if df['Conf W%'][i] not in tieWins:
##                tieWins.append(df['Conf W%'][i])
##                tieTeams = df[df['Conf W%'] == df['Conf W%'][i]]
##                tieTeams.reset_index(inplace=True)
##                tieOrder = hth(tieTeams)
##                for x in range(len(tieOrder)):
##                    indexer.append(tieOrder.Teams[x])
##    for i in range(len(indexer)):
##        reindexer.append(df.index[df['Teams'] == indexer[i]][0])
##
##    df = df.reindex(reindexer)
##
####    for i 
##
##    print(df.to_string())
####    return(df)
