import pandas as pd
import numpy as np
from teamCon import teamCon
from divisions import teamDiv
import random
import pprint

def tmWin(tm, i, wk):
    return(len(wsData[(wsData.Win == tm) & (wsData.Week <= float(wk))]))
            
def tmLoss(tm, i, wk):
    return(len(wsData[(wsData.Loss == tm) & (wsData.Week <= float(wk))]))

def conWin(tm, i, wk):
    return(len(wsData[(wsData.Win == tm) & (wsData['Conference Game?'] == True) & (wsData.Week <= float(wk))]))
            
def conLoss(tm, i, wk):
    return(len(wsData[(wsData.Loss == tm) & (wsData['Conference Game?'] == True) & (wsData.Week <= float(wk))]))

def teamID(tm):
    return(str(idDic[tm]).zfill(3))

def conf(tm):
    return(teamCon[tm])

def div(tm):
    try:
        div = teamDiv[tm]
    except:
        div = '---'
    return(div)

def winPercent(w,l):
    return round(w/(w+l) * 100,4)

def schedule(tm):
    global sched
    
    sched = wsData[(wsData.Home == tm) | (wsData.Away == tm)]
    sched.sort_values('Week')
    sched.reset_index()

    sched = sched.drop(columns=['Home ID', 'Home Conf', 'Away ID', 'Away Conf', "Home Conc", "Away Conc", "Date","Pre-Game Hype Score", "Upset Score", "Margin", "Write About", '2017?'])
    
    return(print(sched.to_string()))

def coinToss(teamList):
    ints = len(teamList)
    toss = random.randint(0, ints - 1)
    return teamList[toss]




wsData = pd.read_excel(r'C:\users\wilgj\desktop\python crap\dataOutput.xlsx', sheet_name='data')
WL = pd.read_excel(r'C:\users\wilgj\desktop\python crap\dataOutput.xlsx', sheet_name='WL')

teams = wsData.Home.drop_duplicates().sort_values()
teams = teams.reset_index(drop=True)
teams = teams.to_frame(name='Team')

teams['ID'] = teams['Team'].map(lambda x: teamID(x))
teams['Conference'] = teams['Team'].map(lambda x: conf(x))
teams['Div'] = teams['Team'].map(lambda x: div(x))

wkMin = min(wsData.Week)
wkMax = max(wsData.Week)

userWk = input("Through which week? Min = " + str(wkMin) + ", Max = " + str(wkMax + 1) + ". For pre-season, enter -1. ")
##print(userWk)

ACC = teams[teams.Conference == 'ACC']
ACC = ACC.reset_index(drop=True)

B10 = teams[teams.Conference == 'Big Ten']
B10 = B10.reset_index(drop=True)

B12 = teams[teams.Conference == 'Big 12']
B12 = B12.reset_index(drop=True)

P12 = teams[teams.Conference == 'Pac-12']
P12 = P12.reset_index(drop=True)

SEC = teams[teams.Conference == 'SEC']
SEC = SEC.reset_index(drop=True)

AAC = teams[teams.Conference == 'American']
AAC = AAC.reset_index(drop=True)

CUSA = teams[teams.Conference == 'C-USA']
CUSA = CUSA.reset_index(drop=True)

MAC = teams[teams.Conference == 'MAC']
MAC = MAC.reset_index(drop=True)

MWC = teams[teams.Conference == 'Mountain West']
MWC = MWC.reset_index(drop=True)

SBC = teams[teams.Conference == 'Sun Belt']
SBC = SBC.reset_index(drop=True)

IND = teams[teams.Conference == 'Independent']
IND = IND.reset_index(drop=True)

cons = [AAC, ACC, B10, B12, CUSA, IND, MAC, MWC, P12, SBC, SEC]

for i in range(len(cons)):
    cons[i]['Wins'] = cons[i]['Team'].map(lambda x: tmWin(x, i, userWk))
    cons[i]['Losses'] = cons[i]['Team'].map(lambda x: tmLoss(x, i, userWk))
    cons[i]['W%'] = np.vectorize(winPercent)(cons[i]['Wins'], cons[i]['Losses'])


for i in range(len(cons)):
    cons[i]['Conf Wins'] = cons[i]['Team'].map(lambda x: conWin(x, i, userWk))
    cons[i]['Conf Losses'] = cons[i]['Team'].map(lambda x: conLoss(x, i, userWk))
    try: cons[i]['Conf W%'] = np.vectorize(winPercent)(cons[i]['Conf Wins'], cons[i]['Conf Losses'])
    except: pass


ACC = ACC.sort_values(by='Conf Wins',ascending=False)
ACC = ACC.reset_index(drop=True)

B10 = B10.sort_values(by='Conf Wins',ascending=False)
B10 = B10.reset_index(drop=True)

B12 = B12.sort_values(by='Conf Wins',ascending=False)
B12 = B12.reset_index(drop=True)

P12 = P12.sort_values(by='Conf Wins',ascending=False)
P12 = P12.reset_index(drop=True)

SEC = SEC.sort_values(by='Conf Wins',ascending=False)
SEC = SEC.reset_index(drop=True)

AAC = AAC.sort_values(by='Conf Wins',ascending=False)
AAC = AAC.reset_index(drop=True)

CUSA = CUSA.sort_values(by='Conf Wins',ascending=False)
CUSA = CUSA.reset_index(drop=True)

MAC = MAC.sort_values(by='Conf Wins',ascending=False)
MAC = MAC.reset_index(drop=True)

MWC = MWC.sort_values(by='Conf Wins',ascending=False)
MWC = MWC.reset_index(drop=True)

SBC = SBC.sort_values(by='Conf Wins',ascending=False)
SBC = SBC.reset_index(drop=True)

##IND = IND.sort_values(by='Wins',ascending=False)
##IND = IND.drop(columns=['Conf Wins', 'Conf Losses'])
IND = IND.reset_index(drop=True)

####Create Division Tables

aacEast = AAC[AAC.Div == 'East']
aacWest = AAC[AAC.Div == 'West']

accAtl = ACC[ACC.Div == 'Atlantic']
aacCoast = ACC[ACC.Div == 'Coastal']

b10East = B10[B10.Div == 'East']
b10West = B10[B10.Div == 'West']





#This needs to be after any standings modifications. It saves the conferences as a snapshot.
cons = [AAC, ACC, B10, B12, CUSA, IND, MAC, MWC, P12, SBC, SEC]


for i in range(len(cons)):
    print(cons[i].to_string())
    print('.')
    print('.')
    print('.')
